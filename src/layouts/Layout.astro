---
import Nav from '../components/Nav.astro';
import Inventory from '../components/Inventory.vue';
import Footer from '../components/Footer.astro';
import Notification from '../components/Notification.astro';
import SandboxPopup from '../components/SandboxPopup.astro';
import '../styles/global.css';

export interface Props {
  title: string;
  backdrop?: string;
  fullScreenLayout?: boolean;
}

const { title, backdrop, fullScreenLayout = false } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Clara Denari Adventures by Cloudinary - Learn about image transformations hands-on.">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Clara Denari Adventures - a Cloudinary Mystery - {title}</title>
  </head>
  <body>
    <div class="wrapper">
      <div class="markdown-body font-serif m-1 sm:m-2 md:m-4 lg:m-8 text-base rounded-lg relative overflow-hidden">
        <Nav />
        <SandboxPopup />        
        <div class="flex">
          {!fullScreenLayout && (
            <div role="complementary" class="lg:inline-block md:inline-block sm:inline-block w-1/3">
              <Inventory client:load />
            </div>
          )}
          <div role="main" class="w-full">
            <slot />
          </div>
        </div>

        <Footer />
      </div>
    </div>
    
    <Notification id="global-notification" type="info" message="" />
  </body>
</html>

<style>
  .backdrop {
    background-repeat: no-repeat;
  }
</style>

<script>
  // Keyboard navigation
  document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('button');
    let currentFocusIndex = 0;

    // Add tabindex to buttons for keyboard navigation
    buttons.forEach((button, index) => {
      button.setAttribute('tabindex', '0');
    });

    // Handle keyboard navigation
    document.addEventListener('keydown', (e) => {
      switch(e.key) {
        case 'ArrowRight':
        case 'ArrowDown':
          e.preventDefault();
          currentFocusIndex = (currentFocusIndex + 1) % buttons.length;
          buttons[currentFocusIndex].focus();
          break;
        case 'ArrowLeft':
        case 'ArrowUp':
          e.preventDefault();
          currentFocusIndex = (currentFocusIndex - 1 + buttons.length) % buttons.length;
          buttons[currentFocusIndex].focus();
          break;
        case 'Enter':
        case ' ':
          if (document.activeElement && document.activeElement.tagName === 'BUTTON') {
            e.preventDefault();
            (document.activeElement as HTMLElement).click();
          }
          break;
      }
    });

    // Focus first button on page load
    if (buttons.length > 0) {
      buttons[0].focus();
    }
  });

  // Iframe height adjustment for embedded content
  function updateIframeHeight() {
    const height = document.body.scrollHeight;
    window.parent.postMessage({ iframeHeight: height }, "*");
  }

  // Make height update function globally available
  (window as any).triggerHeightUpdate = updateIframeHeight;

  // Update height on initial load
  window.onload = updateIframeHeight;
  
  // Update height on navigation (for SPA-like behavior)
  document.addEventListener('DOMContentLoaded', () => {
    updateIframeHeight();
    
    // Watch for content changes
    const observer = new MutationObserver(() => {
      // Debounce height updates to avoid excessive messaging
      clearTimeout((window as any).heightUpdateTimeout);
      (window as any).heightUpdateTimeout = setTimeout(updateIframeHeight, 100);
    });
    
    // Observe changes to the main content
    const mainContent = document.querySelector('main') || document.body;
    observer.observe(mainContent, {
      childList: true,
      subtree: true,
      attributes: true,
      attributeFilter: ['class', 'style']
    });
    
    // Update height on window resize
    window.addEventListener('resize', updateIframeHeight);
    
    // Update height when inventory changes (items added/removed)
    window.addEventListener('item_added', updateIframeHeight);
    window.addEventListener('item_removed', updateIframeHeight);
    
    // Update height when language changes (content might change)
    window.addEventListener('language-changed', () => {
      setTimeout(updateIframeHeight, 200); // Wait for content to update
    });
  });

  