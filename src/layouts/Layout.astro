---
import Nav from '../components/Nav.astro';
import Inventory from '../components/Inventory.vue';
import Footer from '../components/Footer.astro';
import Notification from '../components/Notification.astro';
import SandboxPopup from '../components/SandboxPopup.astro';
import '../styles/global.css';

export interface Props {
  title: string;
  backdrop?: string;
  fullScreenLayout?: boolean;
}

const { title, backdrop, fullScreenLayout = false } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Cloudinary - Stay Curious! ">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
  </head>
  <body>
    <div class="wrapper">
      <div class="markdown-body font-serif m-1 sm:m-2 md:m-4 lg:m-8 text-base rounded-lg relative overflow-hidden">
        <Nav />
        

        
        <SandboxPopup />
        
        
        
        <!-- Mobile Inventory Panel -->
        <div 
          id="mobile-inventory-panel"
          class="lg:hidden md:hidden sm:block block fixed top-16 left-4 z-30 border-2 border-amber-600 rounded-lg p-4 max-w-xs hidden shadow-xl"
          style="background: linear-gradient(135deg, #2a1f1a 0%, #1a1410 25%, #0f0a08 50%, #0a0705 75%, #050302 100%), url('data:image/svg+xml,%3Csvg width=\'100\' height=\'100\' viewBox=\'0 0 100 100\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cfilter id=\'noise\'%3E%3CfeTurbulence type=\'fractalNoise\' baseFrequency=\'0.9\' numOctaves=\'4\' stitchTiles=\'stitch\'/%3E%3C/filter%3E%3Crect width=\'100\' height=\'100\' filter=\'url(%23noise)\' opacity=\'0.1\'/%3E%3C/svg%3E'); text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);"
        >
          <div id="mobile-inventory-content">
            <!-- Inventory content will be loaded here -->
          </div>
        </div>
        
        <div class="flex mb-2">
          {!fullScreenLayout && (
            <div role="complementary" class="lg:inline-block md:hidden sm:hidden hidden w-1/3 pr-2">
              <Inventory client:load />
            </div>
          )}
          <div role="main" class="w-full">
            <slot />
          </div>
        </div>

        <Footer />
      </div>
    </div>
    
    <Notification id="global-notification" type="info" message="" />
  </body>
</html>

<style>
  .backdrop {
    background-repeat: no-repeat;
  }
</style>

<script>
  // Keyboard navigation
  document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('button');
    let currentFocusIndex = 0;

    // Add tabindex to buttons for keyboard navigation
    buttons.forEach((button, index) => {
      button.setAttribute('tabindex', '0');
    });

    // Handle keyboard navigation
    document.addEventListener('keydown', (e) => {
      switch(e.key) {
        case 'ArrowRight':
        case 'ArrowDown':
          e.preventDefault();
          currentFocusIndex = (currentFocusIndex + 1) % buttons.length;
          buttons[currentFocusIndex].focus();
          break;
        case 'ArrowLeft':
        case 'ArrowUp':
          e.preventDefault();
          currentFocusIndex = (currentFocusIndex - 1 + buttons.length) % buttons.length;
          buttons[currentFocusIndex].focus();
          break;
        case 'Enter':
        case ' ':
          if (document.activeElement && document.activeElement.tagName === 'BUTTON') {
            e.preventDefault();
            (document.activeElement as HTMLElement).click();
          }
          break;
      }
    });

    // Focus first button on page load
    if (buttons.length > 0) {
      buttons[0].focus();
    }
  });

  // Mobile inventory toggle
  document.addEventListener('DOMContentLoaded', () => {
    const mobileInventoryBtn = document.getElementById('mobile-inventory-btn');
    const mobileInventoryPanel = document.getElementById('mobile-inventory-panel');
    const mobileInventoryContent = document.getElementById('mobile-inventory-content');
    
    if (mobileInventoryBtn && mobileInventoryPanel) {
      mobileInventoryBtn.addEventListener('click', () => {
        const isHidden = mobileInventoryPanel.classList.contains('hidden');
        
        if (isHidden) {
          mobileInventoryPanel.classList.remove('hidden');
          mobileInventoryBtn.textContent = '‚ùå Close';
          
          // Load inventory content
          if (mobileInventoryContent) {
            const inventoryNames = JSON.parse(localStorage.getItem('inventory_item') || '{}');
            const names = Object.keys(inventoryNames);
            
            if (names.length === 0) {
              mobileInventoryContent.innerHTML = '<p class="text-amber-800 text-sm">Sorry, there are no items here yet</p>';
            } else {
              const itemsHtml = names.map(name => `<p class="text-amber-800 text-sm">‚Ä¢ ${name}</p>`).join('');
              mobileInventoryContent.innerHTML = `
                <h3 class="text-amber-800 font-bold mb-2">Inventory</h3>
                ${itemsHtml}
              `;
            }
          }
        } else {
          mobileInventoryPanel.classList.add('hidden');
          mobileInventoryBtn.textContent = 'üì¶ Inventory';
        }
      });
    }
  });


 