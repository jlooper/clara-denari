---
import { translations } from '../i18n/translations.js';
---

<div id="about-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center">
  <div class="bg-gray-900 border-2 border-blue-500 rounded-lg p-6 max-w-2xl mx-4 max-h-[80vh] overflow-y-auto">
    <div class="flex justify-between items-center mb-4">
      <h2 id="modal-title" class="text-2xl font-bold text-blue-400 shadow-lg" data-translation-key="page.about">
        About this Experiment
      </h2>
      <button 
        id="close-modal" 
        class="text-gray-400 hover:text-white text-2xl font-bold transition-colors duration-200"
        aria-label="Close modal"
      >
        Ã—
      </button>
    </div>
    
    <div class="bg-black bg-opacity-50 border border-blue-500 rounded-lg p-4">
      <div class="text-gray-100 text-lg leading-relaxed" style="text-shadow: 0 0 3px rgba(0, 255, 0, 0.5);" id="modal-content" data-translation-key="about.content">
        <p>Cloudinary Experiments are apps that explore Cloudinary's image, video, and audio transformation capabilities.</p> 
        <p>The images in this game were generated by ChatGPT. Each backdrop image uses the "fl_c2pa"
        transformation to help trace provenance using the C2PA standard. Learn more about C2PA <a href="https://c2pa.org" target="_blank" class="text-blue-400 hover:text-blue-300 underline">here</a>.
        Learn more about this transformation at <a href="https://cloudinary.com/documentation/image_transformations#c2pa_transformation" target="_blank" class="text-blue-400 hover:text-blue-300 underline">Cloudinary documentation</a>.
        </p>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ translations }}>
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('about-modal');
    const closeButton = document.getElementById('close-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalContent = document.getElementById('modal-content');

    function getCurrentLanguage() {
      return localStorage.getItem('preferred-language') || 'en';
    }

    function getTranslation(key) {
      const currentLang = getCurrentLanguage();
      const fallbackLang = currentLang === 'pt-br' ? 'en' : currentLang;
      return translations[key]?.[fallbackLang] || translations[key]?.en || key;
    }

    function updateModalText() {
      if (modalTitle) {
        const titleText = getTranslation('page.about');
        modalTitle.textContent = titleText;
      }

      if (modalContent) {
        const contentText = getTranslation('about.content');
        modalContent.innerHTML = contentText;
      }
    }

    function openModal() {
      if (modal) {
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        document.body.style.overflow = 'hidden'; // Prevent background scrolling
        updateModalText();
      }
    }

    function closeModal() {
      if (modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        document.body.style.overflow = ''; // Restore scrolling
      }
    }

    // Close modal when clicking outside
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });

    // Close modal with close button
    closeButton?.addEventListener('click', closeModal);

    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
        closeModal();
      }
    });

    // Listen for language changes
    window.addEventListener('language-changed', updateModalText);
    document.addEventListener('language-changed', updateModalText);

    // Expose openModal function globally so footer can call it
    window.openAboutModal = openModal;
  });
</script>

<style>
  #about-modal {
    backdrop-filter: blur(4px);
    animation: fadeIn 0.3s ease-out;
  }

  #about-modal .bg-gray-900 {
    animation: slideIn 0.3s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideIn {
    from {
      transform: translateY(-20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  #close-modal {
    transition: all 0.2s ease;
  }

  #close-modal:hover {
    transform: scale(1.1);
  }
</style>
