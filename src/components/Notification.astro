---
export interface Props {
  id?: string;
  type?: 'success' | 'info' | 'warning' | 'error';
  message: string;
  duration?: number;
}

const { id = 'notification', type = 'info', message, duration = 3000 } = Astro.props;
---

<div id={id} class="notification notification-{type} hidden">
  <div class="notification-content">
    <span class="notification-icon">{type === 'success' ? '✓' : type === 'warning' ? '⚠' : type === 'error' ? '✗' : 'ℹ'}</span>
    <span class="notification-message">{message}</span>
  </div>
</div>

<style>
  .notification {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    border: 2px solid;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    transform: translateX(100%);
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    max-width: 300px;
    font-family: 'Courier New', monospace;
  }

  .notification.show {
    transform: translateX(0);
  }

  .notification-content {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .notification-icon {
    font-size: 1.2em;
    font-weight: bold;
  }

  .notification-message {
    font-size: 0.9em;
    font-weight: bold;
  }

  .notification-success {
    background: #000;
    border-color: #00ff00;
    color: #00ff00;
    text-shadow: 0 0 5px rgba(0, 255, 0, 0.5);
    box-shadow: 0 0 15px rgba(0, 255, 0, 0.3);
  }

  .notification-info {
    background: #000;
    border-color: #0060f2;
    color: #0060f2;
    text-shadow: 0 0 5px rgba(0, 96, 242, 0.5);
    box-shadow: 0 0 15px rgba(0, 96, 242, 0.3);
  }

  .notification-warning {
    background: #000;
    border-color: #ffaa00;
    color: #ffaa00;
    text-shadow: 0 0 5px rgba(255, 170, 0, 0.5);
    box-shadow: 0 0 15px rgba(255, 170, 0, 0.3);
  }

  .notification-error {
    background: #000;
    border-color: #ff4444;
    color: #ff4444;
    text-shadow: 0 0 5px rgba(255, 68, 68, 0.5);
    box-shadow: 0 0 15px rgba(255, 68, 68, 0.3);
  }
</style>

<script>
  class NotificationManager {
    notifications: any[];

    constructor() {
      this.notifications = [];
    }

    show(message, type = 'info', duration = 3000) {
      const notification = document.createElement('div');
      notification.className = `notification notification-${type}`;
      notification.innerHTML = `
        <div class="notification-content">
          <span class="notification-icon">${this.getIcon(type)}</span>
          <span class="notification-message">${message}</span>
        </div>
      `;

      document.body.appendChild(notification);

      // Trigger animation
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);

      // Auto remove
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }, duration);

      this.notifications.push(notification);
    }

    getIcon(type) {
      const icons = {
        success: '✓',
        warning: '⚠',
        error: '✗',
        info: 'ℹ'
      };
      return icons[type] || 'ℹ';
    }
  }

  // Global notification manager
  (window as any).notificationManager = new NotificationManager();

  // Helper function to show notifications
  (window as any).showNotification = (message, type = 'info', duration = 3000) => {
    (window as any).notificationManager.show(message, type, duration);
  };
</script> 