---
import { translations } from '../i18n/translations.js';
---

<div id="email-submission-widget" class="bg-blue-900 bg-opacity-30 border border-blue-500 rounded p-4 mb-4">
  <div class="flex items-center gap-3 mb-3">
    <div class="bg-blue-500 rounded-full p-2">
      <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
      </svg>
    </div>
    <h4 class="text-blue-400 font-bold text-lg" data-translation-key="email.widget.title">ðŸŽ‰ Badge Earned!</h4>
  </div>
  
  <p class="text-blue-200 mb-4" data-translation-key="email.widget.message">
    You've successfully solved this Clara Denari mystery! Enter your email to receive your completion badge.
  </p>
  
  <form id="email-form" class="space-y-3">
    <div>
      <label for="player-email" class="block text-blue-300 text-sm font-medium mb-1" data-translation-key="email.widget.email_label">
        Email Address:
      </label>
      <input 
        type="email" 
        id="player-email" 
        name="email"
        required
        class="w-full bg-gray-700 text-white p-3 rounded border border-gray-600 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-colors duration-200"
        placeholder="your.email@example.com"
        data-translation-key="email.widget.email_placeholder"
      />
    </div>
    
    <!-- GDPR Compliant Consent Section -->
    <div class="space-y-3">
      <!-- Badge Email Consent (Required) -->
      <div class="flex items-start gap-2">
        <input 
          type="checkbox" 
          id="badge-consent" 
          name="badge_consent"
          required
          class="mt-1"
        />
        <label for="badge-consent" class="text-blue-300 text-sm" data-translation-key="email.widget.badge_consent">
          I consent to receive my completion badge via email. *
        </label>
      </div>
      
      <!-- Newsletter Consent (Optional) -->
      <div class="flex items-start gap-2">
        <input 
          type="checkbox" 
          id="newsletter-consent" 
          name="newsletter"
          class="mt-1"
        />
        <label for="newsletter-consent" class="text-blue-300 text-sm" data-translation-key="email.widget.newsletter_consent">
          I'd like to receive updates about new Clara Denari adventures and Cloudinary experiments.
        </label>
      </div>
      
      <!-- Privacy Policy Consent -->
      <div class="flex items-start gap-2">
        <input 
          type="checkbox" 
          id="privacy-consent" 
          name="privacy_consent"
          required
          class="mt-1"
        />
        <label for="privacy-consent" class="text-blue-300 text-sm">
          I have read and agree to the <a href="/privacy" target="_blank" class="text-blue-400 hover:text-blue-300 underline">Privacy Policy</a> and understand how my data will be used. *
        </label>
      </div>
      
      <!-- Data Retention Notice -->
      <div class="bg-gray-800 rounded p-3 text-xs text-gray-400">
        <p data-translation-key="email.widget.data_notice">
          <strong>Data Usage:</strong> Your email will be used solely to send your completion badge. Newsletter subscribers' emails are stored until you unsubscribe. You can request data deletion at any time by contacting us.
        </p>
      </div>
    </div>
    
    <div class="flex gap-3">
      <button 
        type="submit" 
        id="submit-email-btn" 
        class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition-colors duration-200 flex-1"
        data-translation-key="email.widget.submit"
      >
        Send My Badge
      </button>
      <button 
        type="button" 
        id="skip-badge-btn" 
        class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded transition-colors duration-200"
        data-translation-key="email.widget.skip"
      >
        Skip
      </button>
    </div>
  </form>
  
  <div id="email-status" class="mt-3 hidden">
    <!-- Status messages will be inserted here -->
  </div>
</div>

<script define:vars={{ translations }}>
  document.addEventListener('DOMContentLoaded', () => {
    const emailForm = document.getElementById('email-form');
    const submitBtn = document.getElementById('submit-email-btn');
    const skipBtn = document.getElementById('skip-badge-btn');
    const emailStatus = document.getElementById('email-status');
    const emailInput = document.getElementById('player-email');

    function getCurrentLanguage() {
      return localStorage.getItem('preferred-language') || 'en';
    }

    function getTranslation(key) {
      const currentLang = getCurrentLanguage();
      const fallbackLang = currentLang === 'pt-br' ? 'en' : currentLang;
      return translations[key]?.[fallbackLang] || translations[key]?.en || key;
    }

    function updateWidgetText() {
      const elements = document.querySelectorAll('[data-translation-key]');
      elements.forEach(element => {
        const key = element.getAttribute('data-translation-key');
        if (key) {
          const text = getTranslation(key);
          if (element.tagName === 'INPUT' && element.type === 'text') {
            element.placeholder = text;
          } else if (element.tagName === 'INPUT' && element.type === 'email') {
            element.placeholder = text;
          } else {
            element.textContent = text;
          }
        }
      });
    }

    function showStatus(message, type = 'info') {
      emailStatus.innerHTML = `
        <div class="p-3 rounded border ${
          type === 'success' ? 'bg-green-900 border-green-500 text-green-200' :
          type === 'error' ? 'bg-red-900 border-red-500 text-red-200' :
          'bg-blue-900 border-blue-500 text-blue-200'
        }">
          ${message}
        </div>
      `;
      emailStatus.classList.remove('hidden');
    }

    function hideStatus() {
      emailStatus.classList.add('hidden');
    }

    function setLoadingState(loading) {
      if (loading) {
        submitBtn.disabled = true;
        submitBtn.textContent = getTranslation('email.widget.submitting');
        submitBtn.classList.add('opacity-75');
      } else {
        submitBtn.disabled = false;
        submitBtn.textContent = getTranslation('email.widget.submit');
        submitBtn.classList.remove('opacity-75');
      }
    }

    function setSuccessState() {
      submitBtn.textContent = getTranslation('email.widget.success');
      submitBtn.classList.remove('bg-blue-500', 'hover:bg-blue-600');
      submitBtn.classList.add('bg-green-500', 'hover:bg-green-600');
      submitBtn.disabled = true;
    }

    // Handle form submission
    emailForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const email = emailInput.value.trim();
      const badgeConsent = document.getElementById('badge-consent').checked;
      const newsletter = document.getElementById('newsletter-consent').checked;
      const privacyConsent = document.getElementById('privacy-consent').checked;
      
      if (!email) {
        showStatus(getTranslation('email.widget.email_required'), 'error');
        return;
      }

      if (!isValidEmail(email)) {
        showStatus(getTranslation('email.widget.invalid_email'), 'error');
        return;
      }

      if (!badgeConsent) {
        showStatus(getTranslation('email.widget.badge_consent_required'), 'error');
        return;
      }

      if (!privacyConsent) {
        showStatus(getTranslation('email.widget.privacy_consent_required'), 'error');
        return;
      }

      try {
        setLoadingState(true);
        hideStatus();

        // Store user data locally with GDPR compliance
        const userData = {
          email,
          badgeConsent: true, // Required for badge
          newsletterConsent: newsletter,
          privacyConsent: true, // Required for processing
          consentTimestamp: new Date().toISOString(),
          achievement: 'game-completion',
          timestamp: new Date().toISOString(),
          game: 'clara-denari',
          gdprCompliant: true
        };

        localStorage.setItem('player_data', JSON.stringify(userData));
        localStorage.setItem('player_email', email);

        // Simulate API call (replace with your actual endpoint)
        await submitEmailData(userData);

        setSuccessState();
        showStatus(getTranslation('email.widget.success_message'), 'success');
        
        // Hide the form after success
        setTimeout(() => {
          emailForm.style.display = 'none';
        }, 3000);

      } catch (error) {
        console.error('Error submitting email:', error);
        showStatus(getTranslation('email.widget.error_message'), 'error');
        setLoadingState(false);
      }
    });

    // Handle skip button
    skipBtn?.addEventListener('click', () => {
      emailForm.style.display = 'none';
      showStatus(getTranslation('email.widget.skipped_message'), 'info');
    });

    // Email validation
    function isValidEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    // Simulate API submission (replace with your actual endpoint)
    async function submitEmailData(userData) {
      // This is where you would send the data to your backend
      // For now, we'll just simulate a delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      console.log('Email data submitted:', userData);
      
      // You could send this to your backend like:
      // const response = await fetch('/api/submit-badge-request', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(userData)
      // });
    }

    // Listen for language changes
    window.addEventListener('language-changed', updateWidgetText);
    document.addEventListener('language-changed', updateWidgetText);

    // Initial text update
    updateWidgetText();
  });
</script>

<style>
  #email-submission-widget input:focus {
    outline: none;
  }
  
  #email-submission-widget button:disabled {
    cursor: not-allowed;
  }
  
  #email-submission-widget .transition-colors {
    transition: all 0.2s ease;
  }
</style>
