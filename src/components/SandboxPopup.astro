---
// SandboxPopup.astro - Cloudinary transformation testing popup
---

<!-- Sandbox Popup -->
<div 
  id="sandbox-popup"
  class="fixed inset-0 bg-black bg-opacity-95 z-50 hidden flex items-start justify-center pt-4 pb-4 px-4"
>
  <div class="border-2 border-blue-600 rounded-lg max-w-4xl w-full max-h-[85vh] overflow-y-auto shadow-2xl" style="background: linear-gradient(135deg, #2a1f1a 0%, #1a1410 25%, #0f0a08 50%, #0a0705 75%, #050302 100%), url('data:image/svg+xml,%3Csvg width=\'100\' height=\'100\' viewBox=\'0 0 100 100\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cfilter id=\'noise\'%3E%3CfeTurbulence type=\'fractalNoise\' baseFrequency=\'0.9\' numOctaves=\'4\' stitchTiles=\'stitch\'/%3E%3C/filter%3E%3Crect width=\'100\' height=\'100\' filter=\'url(%23noise)\' opacity=\'0.1\'/%3E%3C/svg%3E');">
    <div class="flex justify-between items-center p-4 border-b border-blue-600">
      <h2 class="text-responsive-xl md:text-responsive-2xl font-bold text-blue-400 mb-4 shadow-lg">
        Transformation Lab
      </h2>
      <button 
        id="close-sandbox"
        class="text-gray-400 hover:text-red-400 text-responsive-lg md:text-responsive-xl font-bold transition-colors duration-200"
        style="text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);"
      >
        ×
      </button>
    </div>
    <div class="p-6">
      <p class="text-gray-100 mb-6 text-responsive-sm md:text-responsive-base" id="sandbox-description">
        Test Cloudinary image transformations in real-time. Enter your cloud name, public ID, and transformation parameters to see the results.
      </p>
    
      <div id="sandbox-content">
        <!-- CloudinarySandbox component will be loaded here -->
      </div>
      
    </div>
  </div>
</div>

<script>
  // Sandbox popup functionality
  document.addEventListener('DOMContentLoaded', () => {
    const sandboxPopup = document.getElementById('sandbox-popup');
    const closeSandbox = document.getElementById('close-sandbox');
    const sandboxContent = document.getElementById('sandbox-content');
    
    // i18n function
    function t(key: string): string {
      const translations: { [key: string]: { [lang: string]: string } } = {
        'sandbox.title': {
          'en': 'Transformation Lab',
          'fr': 'Laboratoire de Transformation',
          'es': 'Laboratorio de Transformación',
          'pt-br': 'Laboratório de Transformação'
        },
        'sandbox.description': {
          'en': 'Test Cloudinary image transformations in real-time. Enter your cloud name, public ID, and transformation parameters to see the results.',
          'fr': 'Testez les transformations d\'images Cloudinary en temps réel. Entrez votre nom de cloud, ID public et paramètres de transformation pour voir les résultats.',
          'es': 'Prueba las transformaciones de imágenes de Cloudinary en tiempo real. Ingresa tu nombre de nube, ID público y parámetros de transformación para ver los resultados.',
          'pt-br': 'Teste transformações de imagens Cloudinary em tempo real. Digite seu nome de nuvem, ID público e parâmetros de transformação para ver os resultados.'
        },
      };
      
      const currentLang = localStorage.getItem('preferred-language') || 'en';
      return translations[key]?.[currentLang] || translations[key]?.['en'] || key;
    }
    
    // Update text content based on current language
    function updateTextContent() {
      const titleElement = document.getElementById('sandbox-title');
      const descriptionElement = document.getElementById('sandbox-description');
      
      if (titleElement) titleElement.textContent = t('sandbox.title');
      if (descriptionElement) descriptionElement.textContent = t('sandbox.description');
      
      // Force a re-render by triggering a custom event
      window.dispatchEvent(new CustomEvent('sandbox-content-updated'));
    }
    
    if (sandboxPopup) {
      // Update text content initially
      updateTextContent();
      
      // Listen for language changes
      window.addEventListener('language-changed', updateTextContent);
      
      // Use event delegation to catch clicks on the sandbox button
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (target && target.id === 'sandbox-btn') {
          sandboxPopup.classList.remove('hidden');
          sandboxPopup.classList.add('flex');
          
          // Scroll to top of page
          window.scrollTo({ top: 0, behavior: 'smooth' });
          
          // Load CloudinarySandbox component content
          if (sandboxContent) {
            sandboxContent.innerHTML = `
              <div class="cloudinary-sandbox">
                <div class="sandbox-content">
                  <!-- Input Section -->
                  <div class="input-section mb-6">
                    <div class="mb-4">
                      <label class="block text-gray-100 text-sm mb-2">Cloud Name:</label>
                      <input 
                        id="cloud-name"
                        type="text" 
                        class="w-full p-2 bg-gray-800 border border-blue-600 text-gray-200 rounded"
                        placeholder="your-cloud-name"
                        value="demo"
                      />
                    </div>
                    
                    <div class="mb-4">
                      <label class="block text-gray-100 text-sm mb-2">Public ID:</label>
                      <input 
                        id="public-id"
                        type="text" 
                        class="w-full p-2 bg-gray-800 border border-blue-600 text-gray-200 rounded"
                        placeholder="sample"
                        value="sample"
                      />
                    </div>
                    
                    <div class="mb-4">
                      <label class="block text-gray-100 text-sm mb-2">Transformation:</label>
                      <input 
                        id="transformation"
                        type="text" 
                        class="w-full p-2 bg-gray-800 border border-blue-600 text-gray-200 rounded font-mono text-sm"
                        placeholder="c_scale,w_300,h_200,f_auto,q_auto"
                        value="c_scale,w_300,h_200,f_auto,q_auto"
                      />
                    </div>
                    
                    <div class="mb-4">
                      <label class="block text-gray-100 text-sm mb-2">Format:</label>
                      <select 
                        id="format"
                        class="w-full p-2 bg-gray-800 border border-blue-600 text-gray-200 rounded"
                      >
                        <option value="auto">Auto</option>
                        <option value="jpg">JPG</option>
                        <option value="png">PNG</option>
                        <option value="webp">WebP</option>
                        <option value="avif">AVIF</option>
                      </select>
                    </div>
                  </div>
                  
                  <!-- URL Display -->
                  <div class="url-section mb-6">
                    <label class="block text-gray-100 text-sm mb-2">Generated URL:</label>
                      <input 
                        id="generated-url"
                        type="text" 
                        readonly
                      class="w-full p-2 bg-gray-800 border border-blue-600 text-gray-200 rounded font-mono text-xs"
                    />
                  </div>
                  
                  <!-- Preview Section -->
                  <div class="preview-section mb-6">
                    <h4 class="text-gray-100 text-md font-bold mb-3">Preview:</h4>
                    <div class="preview-container">
                      <img 
                        id="preview-image"
                        class="max-w-full border border-blue-600 rounded"
                        alt="Transformation preview"
                      />
                    </div>
                  </div>
                  
                  <!-- Lab Test Section (only shown on lab pages) -->
                  <div id="lab-test-container" class="lab-test-section p-4 border border-blue-600 rounded-lg mb-4 hidden" style="background: linear-gradient(135deg, #2a1f1a 0%, #1a1410 25%, #0f0a08 50%, #0a0705 75%, #050302 100%);">
                    <h4 class="text-gray-400 text-lg font-bold mb-3" style="text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);" id="lab-test-title">Lab Test:</h4>
                    <p class="text-gray-200 text-sm mb-4" style="text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);" id="lab-test-question">
                      After transforming the image, what letters or words can you see? Select your answer:
                    </p>
                    <div class="space-y-2 mb-4" id="lab-test-options">
                      <!-- Options will be dynamically generated -->
                    </div>
                    <div class="flex gap-2">
                      <button 
                        id="submit-answer"
                        class="px-4 py-2 bg-amber-600 text-black rounded hover:bg-amber-500 transition-colors font-bold"
                      >
                        Submit Answer
                      </button>
                      <button 
                        id="clear-answer"
                        class="px-4 py-2 bg-gray-600 text-gray-200 rounded hover:bg-gray-500 transition-colors"
                      >
                        Clear
                      </button>
                    </div>
                    <div id="test-result" class="mt-3 text-sm font-bold hidden"></div>
                    <div id="success-message" class="mt-4 p-3 border border-green-500 rounded-lg bg-green-900 bg-opacity-30 hidden">
                      <p class="text-green-300 text-sm leading-relaxed" style="text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);" id="success-message-text">
                        Well done! You've successfully enhanced the image and discovered the hidden letters "Ch Os". It looks like this is a piece of Dr. Chiaro Obscuro's stationery, and it ties this criminal to the crime.
                        Keep this information safe as you continue your investigation!
                      </p>
                    </div>
                  </div>
                  
                  <!-- Lab Results Storage (always shown) -->
                  <div id="lab-results-container" class="lab-results-storage p-4 border border-green-600 rounded-lg" style="background: linear-gradient(135deg, #1a2f1a 0%, #0f1a0f 25%, #0a0f0a 50%, #050a05 75%, #020502 100%);">
                    <h4 class="text-green-400 text-lg font-bold mb-3" style="text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);">Lab Results:</h4>
                    <div id="stored-results" class="text-green-200 text-sm space-y-1" style="text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);">
                      <p class="text-gray-400 italic">No results yet. Complete the lab test above to see your findings.</p>
                    </div>
                    
                    <!-- continue button -->
                    <div class="flex justify-end">
                      <button 
                        id="continue-btn"
                        class="px-4 py-2 bg-amber-600 text-black rounded hover:bg-amber-500 transition-colors font-bold"
                      >
                        Continue
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            `;
            
            // Initialize sandbox functionality
            initializeSandbox();
          }
        }
      });
      
      // Close sandbox
      if (closeSandbox) {
        closeSandbox.addEventListener('click', () => {
          sandboxPopup.classList.add('hidden');
          sandboxPopup.classList.remove('flex');
        });
      }
      
      // Close on backdrop click
      sandboxPopup.addEventListener('click', (e) => {
        if (e.target === sandboxPopup) {
          sandboxPopup.classList.add('hidden');
          sandboxPopup.classList.remove('flex');
        }
      });
      
      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !sandboxPopup.classList.contains('hidden')) {
          sandboxPopup.classList.add('hidden');
          sandboxPopup.classList.remove('flex');
        }
      });
    }
    
    function initializeSandbox() {
      const cloudNameInput = document.getElementById('cloud-name') as HTMLInputElement;
      const publicIdInput = document.getElementById('public-id') as HTMLInputElement;
      const transformationInput = document.getElementById('transformation') as HTMLInputElement;
      const formatSelect = document.getElementById('format') as HTMLSelectElement;
      const generatedUrlInput = document.getElementById('generated-url') as HTMLInputElement;
      const previewImage = document.getElementById('preview-image') as HTMLImageElement;
      const submitAnswerBtn = document.getElementById('submit-answer') as HTMLButtonElement;
      const clearAnswerBtn = document.getElementById('clear-answer') as HTMLButtonElement;
      const testResult = document.getElementById('test-result') as HTMLDivElement;
      const successMessage = document.getElementById('success-message') as HTMLDivElement;
      const storedResults = document.getElementById('stored-results') as HTMLDivElement;
      
      if (!cloudNameInput || !publicIdInput || !transformationInput || !formatSelect || 
          !generatedUrlInput || !previewImage || !submitAnswerBtn || !clearAnswerBtn || 
          !testResult || !successMessage || !storedResults) {
        console.error('Some sandbox elements not found');
        return;
      }
      
      function updateUrl() {
        const cloudName = cloudNameInput.value;
        const publicId = publicIdInput.value;
        const transformation = transformationInput.value;
        const format = formatSelect.value;
        
        if (!cloudName || !publicId) return;
        
        const baseUrl = `https://res.cloudinary.com/${cloudName}/image/upload`;
        const transformPath = transformation ? `/${transformation}` : '';
        const formatExt = format !== 'auto' ? `.${format}` : '';
        
        const url = `${baseUrl}${transformPath}/${publicId}${formatExt}`;
        generatedUrlInput.value = url;
        previewImage.src = url;
      }
      
      // Check if we're on a lab page
      function isLabPage() {
        const path = window.location.pathname;
        return path.includes('lab_1') || path.includes('lab_2') || path.includes('/1') || path.includes('/2') || path.includes('lab_3') || path.includes('/3') || path.includes('lab_4') || path.includes('/4');
      }
      
      // Get current lab based on URL
      function getCurrentLab() {
        const path = window.location.pathname;
        if (path.includes('lab_1') || path.includes('/1')) {
          return {
            name: 'Lab 1',
            correctAnswer: 'Ch Os',
            question: 'After transforming the image, what letters or words can you see?',
            options: [
              { value: 'Ch Os', text: 'Ch Os' },
              { value: 'Cl Os', text: 'Cl Os' },
              { value: 'C H O S', text: 'C H O S' },
              { value: 'Other', text: 'Other' }
            ],
            successMessage: 'Well done! You\'ve successfully enhanced the image and discovered the hidden letters "Ch Os". It looks like this is a piece of Dr. Chiaro Obscuro\'s stationery, and it ties this criminal to the crime. Keep this information safe as you continue your investigation!',
            defaultCloudName: 'claradenari',
            defaultPublicId: 'clara-denari/lab_scrap',
            defaultTransformation: 'e_contrast:50,c_scale,w_300,h_200,f_auto,q_auto'
          };
        }
        if (path.includes('lab_2') || path.includes('/2')) {
          return {
            name: 'Lab 2',
            correctAnswer: 'blue and white',
            question: 'What\'s the original color of the string?',
            options: [
              { value: 'red and blue', text: 'red and blue' },
              { value: 'red and white', text: 'red and white' },
              { value: 'blue and white', text: 'blue and white' },
              { value: 'white', text: 'white' }
            ],
            successMessage: 'Yes! The string is blue and white. It looks like it\'s from a bakery!',
            defaultCloudName: 'claradenari',
            defaultPublicId: 'clara-denari/lab_twine',
            defaultTransformation: 'e_sepia/f_auto/q_auto'
          };
        }
        if (path.includes('lab_3') || path.includes('/3')) {
          return {
            name: 'Lab 3',
            correctAnswer: 'e_background_removal',
            question: 'What\'s the URL transformation to remove the cheese from the key?',
            options: [
              { value: 'e_bg_removal', text: 'e_bg_removal' },
              { value: 'e_background_removal', text: 'e_background_removal' },
              { value: 'e_bg_rm', text: 'e_bg_rm' },
              { value: 'e_removal', text: 'e_removal' }
            ],
            successMessage: 'Yes! The key is now clean and ready to use!',
            defaultCloudName: 'claradenari',
            defaultPublicId: 'clara-denari/lab_key',
            defaultTransformation: 'f_auto/q_auto'
          };
        }
        if (path.includes('lab_4') || path.includes('/4')) {
          return {
            name: 'Lab 4',
            correctAnswer: 'a fire truck',
            question: 'What was the object you removed?',
            options: [
              { value: 'a police car', text: 'a police car' },
              { value: 'a Barbie car', text: 'a Barbie car' },
              { value: 'the Batmobile', text: 'the Batmobile' },
              { value: 'a fire truck', text: 'a fire truck' }
            ],
            successMessage: 'Yes! MIT students do \'hacks\' each year to decorate the dome.',
            defaultCloudName: 'claradenari',
            defaultPublicId: 'clara-denari/MIT',
            defaultTransformation: 'c_crop,g_north,h_0.50,w_1.00'
          };
        }

        // Default fallback - should not reach here if isLabPage() works correctly
        return null;
      }
      
      // Lab results validation
      function validateAnswer() {
        const selectedRadio = document.querySelector('input[name="lab-answer"]:checked') as HTMLInputElement;
        const currentLab = getCurrentLab();
        if (!currentLab) return;
        
        const correctAnswer = currentLab.correctAnswer;
        
        testResult.classList.remove('hidden');
        
        if (!selectedRadio) {
          testResult.textContent = 'Please select an answer before submitting.';
          testResult.className = 'mt-3 text-sm font-bold text-yellow-400';
          return;
        }
        
        const selectedAnswer = selectedRadio.value;
        const timestamp = new Date().toLocaleString();
        
        if (selectedAnswer === correctAnswer) {
          testResult.textContent = `✓ Correct! You found the solution: ${correctAnswer}`;
          testResult.className = 'mt-3 text-sm font-bold text-green-400';
          
          // Show special success message
          successMessage.classList.remove('hidden');
          
          // Store result only if correct
          storeResult(currentLab.name, selectedAnswer, true, timestamp);
          
          // Disable test buttons after successful completion
          disableTestButtons();
          
          // Dispatch custom event to notify lab pages
          window.dispatchEvent(new CustomEvent('labCompleted', { 
            detail: { labName: currentLab.name } 
          }));
          
          // Update continue button to show it
          updateContinueButton();
          
          // Show notification
          if ((window as any).showNotificationPanel) {
            (window as any).showNotificationPanel(`Excellent detective work! You found the solution: ${correctAnswer}`);
          }
        } else {
          testResult.textContent = 'Not quite right. Look more carefully at the transformed image and its URL.';
          testResult.className = 'mt-3 text-sm font-bold text-red-400';
          
          // Hide success message for incorrect answers
          successMessage.classList.add('hidden');
          
          // Don't store incorrect answers
        }
      }
      
      function clearAnswer() {
        const radios = document.querySelectorAll('input[name="lab-answer"]') as NodeListOf<HTMLInputElement>;
        radios.forEach(radio => radio.checked = false);
        testResult.classList.add('hidden');
      }
      
      function disableTestButtons() {
        const radios = document.querySelectorAll('input[name="lab-answer"]') as NodeListOf<HTMLInputElement>;
        radios.forEach(radio => {
          radio.disabled = true;
          radio.parentElement?.classList.add('opacity-50', 'cursor-not-allowed');
        });
        
        submitAnswerBtn.disabled = true;
        submitAnswerBtn.classList.add('opacity-50', 'cursor-not-allowed');
        submitAnswerBtn.textContent = 'Completed ✓';
        
        clearAnswerBtn.disabled = true;
        clearAnswerBtn.classList.add('opacity-50', 'cursor-not-allowed');
      }
      
      function enableTestButtons() {
        const radios = document.querySelectorAll('input[name="lab-answer"]') as NodeListOf<HTMLInputElement>;
        radios.forEach(radio => {
          radio.disabled = false;
          radio.parentElement?.classList.remove('opacity-50', 'cursor-not-allowed');
        });
        
        submitAnswerBtn.disabled = false;
        submitAnswerBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        submitAnswerBtn.textContent = 'Submit Answer';
        
        clearAnswerBtn.disabled = false;
        clearAnswerBtn.classList.remove('opacity-50', 'cursor-not-allowed');
      }
      
      function showLabTest() {
        const labTestContainer = document.getElementById('lab-test-container');
        if (labTestContainer) labTestContainer.classList.remove('hidden');
      }
      
      function hideLabTest() {
        const labTestContainer = document.getElementById('lab-test-container');
        if (labTestContainer) labTestContainer.classList.add('hidden');
      }
      
      function showLabResults() {
        const labResultsContainer = document.getElementById('lab-results-container');
        if (labResultsContainer) labResultsContainer.classList.remove('hidden');
      }
      
      function hideLabResults() {
        const labResultsContainer = document.getElementById('lab-results-container');
        if (labResultsContainer) labResultsContainer.classList.add('hidden');
      }
      
      function generateQuiz() {
        const currentLab = getCurrentLab();
        if (!currentLab) return;
        
        const titleElement = document.getElementById('lab-test-title');
        const questionElement = document.getElementById('lab-test-question');
        const optionsContainer = document.getElementById('lab-test-options');
        const successTextElement = document.getElementById('success-message-text');
        
        if (titleElement) titleElement.textContent = `${currentLab.name} Test:`;
        if (questionElement) questionElement.textContent = currentLab.question;
        if (successTextElement) successTextElement.textContent = currentLab.successMessage;
        
        if (optionsContainer) {
          optionsContainer.innerHTML = '';
          currentLab.options.forEach(option => {
            const label = document.createElement('label');
            label.className = 'flex items-center space-x-2 cursor-pointer';
            label.innerHTML = `
              <input type="radio" name="lab-answer" value="${option.value}" class="text-gray-600">
              <span class="text-gray-200">${option.text}</span>
            `;
            optionsContainer.appendChild(label);
          });
        }
      }
      
      function checkLabCompletion() {
        const currentLab = getCurrentLab();
        if (!currentLab) return;
        
        const results = JSON.parse(localStorage.getItem('labResults') || '[]');
        const labCompleted = results.some((result: any) => result.lab === currentLab.name && result.correct === true);
        
        if (labCompleted) {
          disableTestButtons();
          testResult.classList.remove('hidden');
          testResult.textContent = `✓ ${currentLab.name} already completed successfully!`;
          testResult.className = 'mt-3 text-sm font-bold text-green-400';
          successMessage.classList.remove('hidden');
        } else {
          enableTestButtons();
          successMessage.classList.add('hidden');
        }
      }
      
      function storeResult(labName: string, answer: string, isCorrect: boolean, timestamp: string) {
        // Get existing results from localStorage
        const existingResults = JSON.parse(localStorage.getItem('labResults') || '[]');
        
        // Add new result
        const newResult = {
          lab: labName,
          answer: answer,
          correct: isCorrect,
          timestamp: timestamp
        };
        
        existingResults.push(newResult);
        
        // Save to localStorage
        localStorage.setItem('labResults', JSON.stringify(existingResults));
        
        // Update display
        updateResultsDisplay();
      }
      
      function updateResultsDisplay() {
        const results = JSON.parse(localStorage.getItem('labResults') || '[]');
        
        if (results.length === 0) {
          storedResults.innerHTML = '<p class="text-gray-400 italic">No results yet. Complete the lab test above to see your findings.</p>';
          return;
        }
        
        let html = '';
        results.forEach((result: any, index: number) => {
          const statusIcon = result.correct ? '✓' : '✗';
          const statusColor = result.correct ? 'text-green-400' : 'text-red-400';
          html += `<div class="flex justify-between items-center py-1">
            <span>${result.lab}: ${result.answer}</span>
            <span class="${statusColor}">${statusIcon}</span>
          </div>`;
        });
        
        //html += `<button id="clear-all-results" class="mt-2 text-xs text-gray-400 hover:text-gray-200 underline">Clear All Results</button>`;
        
        storedResults.innerHTML = html;
        
        // Add event listener for clear all button
        const clearAllBtn = document.getElementById('clear-all-results');
        if (clearAllBtn) {
          clearAllBtn.addEventListener('click', () => {
            localStorage.removeItem('labResults');
            updateResultsDisplay();
            checkLabCompletion(); // Re-enable test buttons if lab was completed
          });
        }
        
        // Update continue button visibility and navigation
        updateContinueButton();
      }
      
      function updateContinueButton() {
        const continueBtn = document.getElementById('continue-btn');
        const currentLab = getCurrentLab();
        
        if (!continueBtn || !currentLab) return;
        
        // Check if current lab is completed
        const results = JSON.parse(localStorage.getItem('labResults') || '[]');
        const labCompleted = results.some((result: any) => result.lab === currentLab.name && result.correct === true);
        
        if (labCompleted) {
          continueBtn.style.display = 'block';
          (continueBtn as HTMLButtonElement).disabled = false;
          continueBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        } else {
          continueBtn.style.display = 'none';
        }
      }
      
      function getNextPageUrl() {
        const currentLab = getCurrentLab();
        if (!currentLab) return '#';
        
        // Define navigation flow based on lab
        if (currentLab.name === 'Lab 1') {
          return '/sticky_paper';
        } else if (currentLab.name === 'Lab 2') {
          return '/pastry_shop';
        } else if (currentLab.name === 'Lab 3') {
          return '/the_napkin';
        }
        else if (currentLab.name === 'Lab 4') {
          return '/the_dome';
        }
        return '#';
      }
      
      // Add event listeners
      [cloudNameInput, publicIdInput, transformationInput, formatSelect].forEach(input => {
        input.addEventListener('input', updateUrl);
      });
      
      submitAnswerBtn.addEventListener('click', validateAnswer);
      clearAnswerBtn.addEventListener('click', clearAnswer);
      
      // Add continue button event listener
      const continueBtn = document.getElementById('continue-btn');
      if (continueBtn) {
        continueBtn.addEventListener('click', () => {
          const nextPageUrl = getNextPageUrl();
          if (nextPageUrl && nextPageUrl !== '#') {
            window.location.href = nextPageUrl;
          }
        });
      }
      
      // Initialize URL and always show lab results
      updateUrl();
      updateResultsDisplay();
      
      if (isLabPage()) {
        const currentLab = getCurrentLab();
        if (currentLab) {
          // Set lab-specific default values
          if (currentLab.defaultCloudName) {
            const cloudNameInput = document.getElementById('cloud-name') as HTMLInputElement;
            if (cloudNameInput) cloudNameInput.value = currentLab.defaultCloudName;
          }
          if (currentLab.defaultPublicId) {
            const publicIdInput = document.getElementById('public-id') as HTMLInputElement;
            if (publicIdInput) publicIdInput.value = currentLab.defaultPublicId;
          }
          if (currentLab.defaultTransformation) {
            const transformationInput = document.getElementById('transformation') as HTMLInputElement;
            if (transformationInput) transformationInput.value = currentLab.defaultTransformation;
          }
          
          // Update URL with the new default values
          updateUrl();
          
          showLabTest();
          generateQuiz();
          checkLabCompletion();
        } else {
          hideLabTest();
        }
      } else {
        hideLabTest();
      }
      
      // Always show lab results regardless of page
      showLabResults();
      
      // Update continue button initially
      updateContinueButton();
    }
  });
</script>

<style>
  /* Custom scrollbar for sandbox popup */
  #sandbox-popup .overflow-y-auto::-webkit-scrollbar {
    width: 8px;
  }
  
  #sandbox-popup .overflow-y-auto::-webkit-scrollbar-track {
    background: rgba(139, 69, 19, 0.2);
    border-radius: 4px;
  }
  
  #sandbox-popup .overflow-y-auto::-webkit-scrollbar-thumb {
    background: rgba(139, 69, 19, 0.6);
    border-radius: 4px;
  }
  
  #sandbox-popup .overflow-y-auto::-webkit-scrollbar-thumb:hover {
    background: rgba(139, 69, 19, 0.8);
  }
</style>

