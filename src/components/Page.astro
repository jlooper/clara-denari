---
export interface Props {
  url?: string;
  instructions?: string;
  action: string;
  condition?: string;
  resultText?: string;
  showResultOnly?: boolean;
}

const { url, instructions = "", action, condition = "none", resultText = "", showResultOnly = false } = Astro.props;
---

<div class="page-navigation">
  {instructions && <p class="mb-4 text-gray-100">{instructions}</p>}
  
  <button 
    class="bg-black text-green-500 border-2 border-blue-500 px-6 py-3 rounded-lg hover:bg-green-500 hover:text-black transition-colors duration-200 font-bold text-lg"
    style="text-shadow: 0 0 5px rgba(244, 227, 153, 0.242);"
    data-url={url}
    data-condition={condition}
    data-result-text={resultText}
    data-show-result-only={showResultOnly}
    id={`page-btn-${url || 'result'}`}
  >
    {action}
  </button>
</div>

<script>
  // Add event listener when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Find all page navigation buttons
    const pageButtons = document.querySelectorAll('[data-url], [data-show-result-only]');
    
    // Check button visibility based on conditions
    pageButtons.forEach(button => {
      const condition = button.getAttribute('data-condition');
      
      // Check if button should be initially visible
      if (condition && condition !== 'none') {
        let shouldShow = true;
        
        // Check lab completion condition
        if (condition.startsWith('lab_')) {
          const labName = condition.replace('lab_', 'Lab ');
          const results = JSON.parse(localStorage.getItem('labResults') || '[]');
          shouldShow = results.some((result: any) => result.lab === labName && result.correct === true);
        }
        // Check item collection condition
        else if (!isNaN(Number(condition))) {
          const itemId = condition;
          const inventoryItems = JSON.parse(localStorage.getItem('inventory_item') || '{}');
          shouldShow = inventoryItems[itemId] === true;
        }
        
        // Hide button if condition not met
        if (!shouldShow) {
          (button as HTMLElement).style.display = 'none';
        }
      }
    });
    
    // Listen for inventory changes to update button visibility
    window.addEventListener('item_added', () => {
      pageButtons.forEach(button => {
        const condition = button.getAttribute('data-condition');
        
        if (condition && condition !== 'none') {
          let shouldShow = true;
          
          // Check item collection condition
          if (!isNaN(Number(condition))) {
            const itemId = condition;
            const inventoryItems = JSON.parse(localStorage.getItem('inventory_item') || '{}');
            shouldShow = inventoryItems[itemId] === true;
          }
          
          // Show/hide button based on condition
          (button as HTMLElement).style.display = shouldShow ? 'block' : 'none';
        }
      });
    });
    
    pageButtons.forEach(button => {
      button.addEventListener('click', () => {
        const url = button.getAttribute('data-url');
        const condition = button.getAttribute('data-condition');
        const resultText = button.getAttribute('data-result-text');
        const showResultOnly = button.getAttribute('data-show-result-only') === 'true';
        
        // If there's result text, show it in the notification panel
        if (resultText) {
          if (typeof window !== 'undefined' && (window as any).showNotificationPanel) {
            (window as any).showNotificationPanel(resultText, 4000);
          }
        }
        
        // If showResultOnly is true, don't navigate
        if (showResultOnly) {
          return;
        }
        
        // Check condition if specified
        if (condition && condition !== 'none') {
          // Check if this is a lab completion condition
          if (condition.startsWith('lab_')) {
            const labName = condition.replace('lab_', 'Lab ');
            const results = JSON.parse(localStorage.getItem('labResults') || '[]');
            const labCompleted = results.some((result: any) => result.lab === labName && result.correct === true);
            
            if (!labCompleted) {
              // Show notification that lab must be completed first
              if (typeof window !== 'undefined' && (window as any).showNotificationPanel) {
                (window as any).showNotificationPanel(`You must complete ${labName} first! Use the Lab button to take the quiz.`, 5000);
              }
              return; // Don't navigate
            }
          } 
          // Check if this is an item collection condition (numeric)
          else if (!isNaN(Number(condition))) {
            const itemId = condition;
            const inventoryItems = JSON.parse(localStorage.getItem('inventory_item') || '{}');
            const itemCollected = inventoryItems[itemId] === true;
            
            if (!itemCollected) {
              // Show notification that item must be collected first
              if (typeof window !== 'undefined' && (window as any).showNotificationPanel) {
                (window as any).showNotificationPanel(`You need to examine the evidence first! Look for items you can interact with.`, 5000);
              }
              return; // Don't navigate
            }
          }
        }
        
        // Navigate to the page if URL is provided
        if (url) {
          window.location.href = `/${url}`;
        }
      });
    });
  });
</script> 