---
import { translations } from '../i18n/translations.js';
---

<div id="holopin-reward-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center">
  <div class="bg-gray-900 border-2 border-green-500 rounded-lg p-6 max-w-md mx-4">
    <div class="text-center">
      <div class="mb-4">
        <div class="inline-block p-4 bg-green-500 rounded-full mb-4">
          <svg class="w-12 h-12 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
          </svg>
        </div>
        <h2 id="reward-title" class="text-2xl font-bold text-green-400 mb-2" data-translation-key="holopin.reward.title">
          ðŸŽ‰ Badge Earned!
        </h2>
        <p id="reward-message" class="text-gray-300 mb-4" data-translation-key="holopin.reward.message">
          Congratulations! You've earned a Holopin badge for completing this challenge.
        </p>
      </div>

      <div id="reward-content" class="mb-6">
        <!-- Dynamic content will be inserted here -->
      </div>

      <div class="flex flex-col sm:flex-row gap-3 justify-center">
        <button 
          id="claim-badge-btn" 
          class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition-colors duration-200"
          data-translation-key="holopin.reward.claim"
        >
          Claim Badge
        </button>
        <button 
          id="close-reward-modal" 
          class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded transition-colors duration-200"
          data-translation-key="holopin.reward.close"
        >
          Close
        </button>
      </div>

      <div id="reward-error" class="hidden mt-4 p-3 bg-red-900 border border-red-500 rounded text-red-200">
        <p id="error-message"></p>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ translations }}>
  import holopinService from '../utils/holopin.js';

  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('holopin-reward-modal');
    const closeButton = document.getElementById('close-reward-modal');
    const claimButton = document.getElementById('claim-badge-btn');
    const errorDiv = document.getElementById('reward-error');
    const errorMessage = document.getElementById('error-message');
    const rewardContent = document.getElementById('reward-content');

    function getCurrentLanguage() {
      return localStorage.getItem('preferred-language') || 'en';
    }

    function getTranslation(key) {
      const currentLang = getCurrentLanguage();
      const fallbackLang = currentLang === 'pt-br' ? 'en' : currentLang;
      return translations[key]?.[fallbackLang] || translations[key]?.en || key;
    }

    function updateModalText() {
      const elements = document.querySelectorAll('[data-translation-key]');
      elements.forEach(element => {
        const key = element.getAttribute('data-translation-key');
        if (key) {
          const text = getTranslation(key);
          element.textContent = text;
        }
      });
    }

    function showError(message) {
      errorMessage.textContent = message;
      errorDiv.classList.remove('hidden');
    }

    function hideError() {
      errorDiv.classList.add('hidden');
    }

    function openRewardModal(badgeData) {
      if (modal) {
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        document.body.style.overflow = 'hidden';
        
        // Update content based on badge data
        if (badgeData) {
          updateRewardContent(badgeData);
        }
        
        updateModalText();
      }
    }

    function closeRewardModal() {
      if (modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        document.body.style.overflow = '';
        hideError();
      }
    }

    function updateRewardContent(badgeData) {
      if (!rewardContent) return;

      let content = '';
      
      if (badgeData.claimUrl) {
        content = `
          <div class="bg-gray-800 rounded-lg p-4 mb-4">
            <p class="text-sm text-gray-400 mb-2">Your badge claim link:</p>
            <div class="flex items-center gap-2">
              <input 
                type="text" 
                value="${badgeData.claimUrl}" 
                readonly 
                class="flex-1 bg-gray-700 text-white p-2 rounded text-sm border border-gray-600"
              />
              <button 
                id="copy-link-btn" 
                class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded text-sm transition-colors duration-200"
              >
                Copy
              </button>
            </div>
          </div>
        `;
      }

      if (badgeData.emailed) {
        content += `
          <div class="bg-blue-900 border border-blue-500 rounded-lg p-3 mb-4">
            <p class="text-blue-200 text-sm">
              ðŸ“§ A claim link has been sent to your email address!
            </p>
          </div>
        `;
      }

      rewardContent.innerHTML = content;

      // Add copy functionality
      const copyBtn = document.getElementById('copy-link-btn');
      if (copyBtn) {
        copyBtn.addEventListener('click', () => {
          const input = copyBtn.previousElementSibling;
          input.select();
          document.execCommand('copy');
          
          const originalText = copyBtn.textContent;
          copyBtn.textContent = 'Copied!';
          copyBtn.classList.add('bg-green-500', 'hover:bg-green-600');
          copyBtn.classList.remove('bg-blue-500', 'hover:bg-blue-600');
          
          setTimeout(() => {
            copyBtn.textContent = originalText;
            copyBtn.classList.remove('bg-green-500', 'hover:bg-green-600');
            copyBtn.classList.add('bg-blue-500', 'hover:bg-blue-600');
          }, 2000);
        });
      }
    }

    // Event listeners
    closeButton?.addEventListener('click', closeRewardModal);
    
    claimButton?.addEventListener('click', () => {
      const claimUrl = document.querySelector('input[readonly]')?.value;
      if (claimUrl) {
        window.open(claimUrl, '_blank');
      }
    });

    // Close modal when clicking outside
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeRewardModal();
      }
    });

    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
        closeRewardModal();
      }
    });

    // Listen for language changes
    window.addEventListener('language-changed', updateModalText);
    document.addEventListener('language-changed', updateModalText);

    // Expose functions globally
    window.showHolopinReward = openRewardModal;
    window.holopinService = holopinService;
  });
</script>

<style>
  #holopin-reward-modal {
    backdrop-filter: blur(4px);
    animation: fadeIn 0.3s ease-out;
  }

  #holopin-reward-modal .bg-gray-900 {
    animation: slideIn 0.3s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideIn {
    from {
      transform: translateY(-20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  #claim-badge-btn:hover,
  #close-reward-modal:hover {
    transform: translateY(-1px);
  }
</style>
